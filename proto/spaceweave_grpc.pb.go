// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.1
// source: proto/spaceweave.proto

package spaceweaveproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DiskAllocator_Allocate_FullMethodName           = "/diskalloc.DiskAllocator/Allocate"
	DiskAllocator_Free_FullMethodName               = "/diskalloc.DiskAllocator/Free"
	DiskAllocator_GetDiskUtilization_FullMethodName = "/diskalloc.DiskAllocator/GetDiskUtilization"
)

// DiskAllocatorClient is the client API for DiskAllocator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiskAllocatorClient interface {
	Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error)
	Free(ctx context.Context, in *FreeRequest, opts ...grpc.CallOption) (*FreeResponse, error)
	GetDiskUtilization(ctx context.Context, in *GetDiskUtilizationRequest, opts ...grpc.CallOption) (*GetDiskUtilizationResponse, error)
}

type diskAllocatorClient struct {
	cc grpc.ClientConnInterface
}

func NewDiskAllocatorClient(cc grpc.ClientConnInterface) DiskAllocatorClient {
	return &diskAllocatorClient{cc}
}

func (c *diskAllocatorClient) Allocate(ctx context.Context, in *AllocateRequest, opts ...grpc.CallOption) (*AllocateResponse, error) {
	out := new(AllocateResponse)
	err := c.cc.Invoke(ctx, DiskAllocator_Allocate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskAllocatorClient) Free(ctx context.Context, in *FreeRequest, opts ...grpc.CallOption) (*FreeResponse, error) {
	out := new(FreeResponse)
	err := c.cc.Invoke(ctx, DiskAllocator_Free_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskAllocatorClient) GetDiskUtilization(ctx context.Context, in *GetDiskUtilizationRequest, opts ...grpc.CallOption) (*GetDiskUtilizationResponse, error) {
	out := new(GetDiskUtilizationResponse)
	err := c.cc.Invoke(ctx, DiskAllocator_GetDiskUtilization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskAllocatorServer is the server API for DiskAllocator service.
// All implementations should embed UnimplementedDiskAllocatorServer
// for forward compatibility
type DiskAllocatorServer interface {
	Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error)
	Free(context.Context, *FreeRequest) (*FreeResponse, error)
	GetDiskUtilization(context.Context, *GetDiskUtilizationRequest) (*GetDiskUtilizationResponse, error)
}

// UnimplementedDiskAllocatorServer should be embedded to have forward compatible implementations.
type UnimplementedDiskAllocatorServer struct {
}

func (UnimplementedDiskAllocatorServer) Allocate(context.Context, *AllocateRequest) (*AllocateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Allocate not implemented")
}
func (UnimplementedDiskAllocatorServer) Free(context.Context, *FreeRequest) (*FreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Free not implemented")
}
func (UnimplementedDiskAllocatorServer) GetDiskUtilization(context.Context, *GetDiskUtilizationRequest) (*GetDiskUtilizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiskUtilization not implemented")
}

// UnsafeDiskAllocatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiskAllocatorServer will
// result in compilation errors.
type UnsafeDiskAllocatorServer interface {
	mustEmbedUnimplementedDiskAllocatorServer()
}

func RegisterDiskAllocatorServer(s grpc.ServiceRegistrar, srv DiskAllocatorServer) {
	s.RegisterService(&DiskAllocator_ServiceDesc, srv)
}

func _DiskAllocator_Allocate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskAllocatorServer).Allocate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskAllocator_Allocate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskAllocatorServer).Allocate(ctx, req.(*AllocateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskAllocator_Free_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskAllocatorServer).Free(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskAllocator_Free_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskAllocatorServer).Free(ctx, req.(*FreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskAllocator_GetDiskUtilization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskUtilizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskAllocatorServer).GetDiskUtilization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskAllocator_GetDiskUtilization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskAllocatorServer).GetDiskUtilization(ctx, req.(*GetDiskUtilizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiskAllocator_ServiceDesc is the grpc.ServiceDesc for DiskAllocator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiskAllocator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diskalloc.DiskAllocator",
	HandlerType: (*DiskAllocatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allocate",
			Handler:    _DiskAllocator_Allocate_Handler,
		},
		{
			MethodName: "Free",
			Handler:    _DiskAllocator_Free_Handler,
		},
		{
			MethodName: "GetDiskUtilization",
			Handler:    _DiskAllocator_GetDiskUtilization_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/spaceweave.proto",
}
